// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  email            String            @unique
  hash             String
  hashedRt         String?
  role             Role              @default(USER)
  sites            Site[]
  dataSourceTables DataSourceTable[]
  telegramUser     TelegramUser?

  @@index([email, role])
  @@map("users")
}

model Site {
  id                           Int                         @id @default(autoincrement())
  address                      String                      @unique
  createdAt                    DateTime                    @default(now())
  users                        User[]
  polls                        Poll[]
  dataSourceTableParsingTaskId Int?
  dataSourceTableParse         DataSourceTableParsingTask? @relation(fields: [dataSourceTableParsingTaskId], references: [id])

  @@index([address, createdAt, id])
  @@index([dataSourceTableParsingTaskId])
}

model Poll {
  id            Int               @id @default(autoincrement())
  siteId        Int
  statusCode    Int
  retryCount    Int               @default(0)
  requestMethod EnumRequestMethod
  pollingTaskId Int
  site          Site              @relation(fields: [siteId], references: [id], onDelete: Cascade)
  pollingTask   PollingTask       @relation(fields: [pollingTaskId], references: [id], onDelete: Cascade)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model PollingTask {
  id            Int               @id @default(autoincrement())
  requestMethod EnumRequestMethod @default(GET)
  pollingState  WorkingState      @default(RUNNING)
  updateTrigger UpdateTrigger
  startTime     DateTime          @default(now())
  endTime       DateTime?
  polls         Poll[]
  error         String?

  @@index([pollingState, updateTrigger])
}

model DataSourceTable {
  id                  Int                          @id @default(autoincrement())
  url                 String                       @unique
  provider            DataSourceTableProvider      @default(GOOGLE)
  createdAt           DateTime                     @default(now())
  googleSpreadSheetId String
  users               User[]
  parsingTasks        DataSourceTableParsingTask[]
}

model DataSourceTableParsingTask {
  id                Int             @id @default(autoincrement())
  workingState      WorkingState    @default(RUNNING)
  updateTrigger     UpdateTrigger
  startTime         DateTime        @default(now())
  endTime           DateTime?
  addedSites        Site[]
  error             String?
  dataSourceTable   DataSourceTable @relation(fields: [dataSourceTableId], references: [id], onDelete: Cascade)
  dataSourceTableId Int

  @@index([dataSourceTableId])
  @@index([workingState, updateTrigger])
}

model Config {
  id                 String            @id
  retryCount         Int               @default(5)
  headers            Json?
  pollPerDay         Int               @default(5)
  parallelSitesCount Int               @default(10)
  parsePerDay        Int               @default(5)
  requestMethod      EnumRequestMethod @default(GET)
}

model TelegramUser {
  id     Int  @id @default(autoincrement())
  chatId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

enum DataSourceTableProvider {
  GOOGLE
}

enum UpdateTrigger {
  MANUAL
  SCHEDULE
}

enum WorkingState {
  IDLE
  RUNNING
}

enum EnumRequestMethod {
  GET
  HEAD
  PING
}

enum Role {
  OWNER
  ADMIN
  USER
}
