// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  email            String            @unique
  hash             String
  hashedRt         String?
  role             Role              @default(USER)
  sites            Site[]
  dataSourceTables DataSourceTable[]

  @@map("users")
}

model Site {
  id                           Int                        @id @default(autoincrement())
  address                      String                     @unique
  createdAt                    DateTime                   @default(now())
  users                        User[]
  polls                        Poll[]
  dataSourceTableParsingTaskId Int
  dataSourceTableParse         DataSourceTableParsingTask @relation(fields: [dataSourceTableParsingTaskId], references: [id])
}

model Poll {
  id            Int               @id @default(autoincrement())
  siteId        Int
  statusCode    Int
  retryCount    Int               @default(0)
  requestMethod EnumRequestMethod
  pollingTaskId Int
  site          Site              @relation(fields: [siteId], references: [id], onDelete: Cascade)
  pollingTask   PollingTask       @relation(fields: [pollingTaskId], references: [id], onDelete: Cascade)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model PollingTask {
  id            Int               @id @default(autoincrement())
  requestMethod EnumRequestMethod @default(GET)
  pollingState  PollingState      @default(RUNNING)
  updateTrigger UpdateTrigger
  startTime     DateTime          @default(now())
  endTime       DateTime?
  polls         Poll[]
  error         String?
}

model DataSourceTable {
  id                  Int                          @id @default(autoincrement())
  url                 String                       @unique
  provider            DataSourceTableProvider      @default(GOOGLE)
  createdAt           DateTime                     @default(now())
  parsingTasks        DataSourceTableParsingTask[]
  googleSpreadSheetId String
  users               User[]
}

model DataSourceTableParsingTask {
  id                Int             @id @default(autoincrement())
  dataSourceTable   DataSourceTable @relation(fields: [dataSourceTableId], references: [id])
  dataSourceTableId Int
  updateTrigger     UpdateTrigger
  startTime         DateTime        @default(now())
  endTime           DateTime?
  addedSites        Site[]
  error             String?
}

enum DataSourceTableProvider {
  GOOGLE
}

enum UpdateTrigger {
  MANUAL
  SCHEDULE
}

enum PollingState {
  IDLE
  RUNNING
}

enum EnumRequestMethod {
  GET
  HEAD
  PING
}

enum Role {
  OWNER
  ADMIN
  USER
}
